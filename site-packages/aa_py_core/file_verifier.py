import hashlib
import json
import os
from dataclasses import dataclass
from typing import Any

import pandas as pd
from path import Path


def fv_md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def fv_md5_head_tail(fname):
    mb = 1025 ** 2
    if os.stat(fname).st_size <= 50 * mb:
        return fv_md5(fname)

    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        hash_md5.update(f.read(10 * mb))

        f.seek(-10 * mb, os.SEEK_END)
        hash_md5.update(f.read())

    return hash_md5.hexdigest()


@dataclass
class FileVerifier:
    """
    Object to verify the grouping pipeline, where we group from srce to dest.
    verify() is False if the information is not saved via save().
    verify() is False if srce has changed or dest has changed or dest does not exist.
    verify() is True if srce is unchanged and dest is unchanged and dest exists.
    """
    srce: Any
    dest: Any
    unique_id: Any = None
    user_arguments: dict = None
    fast_verify: bool = True

    def __post_init__(self):
        """
        Ensure that infpath is derived from dest if not provided
        """
        self.srce = Path(self.srce).abspath()
        self.dest = Path(self.dest).abspath()
        self.infpath = self.dest.dirname().joinpath('groupedinfo.json')

    def save(self, additional=None):
        if additional is None:
            additional = {}

        if self.infpath.isfile():
            with open(self.infpath) as f:
                fileinf = json.load(f)
        else:
            fileinf = {}

        inf = self.generate()
        for k, v in additional.items():
            inf['additional'][k] = v

        fileinf[self.dest.basename().lower()] = inf

        with open(self.infpath, 'w') as fp:
            json.dump(fileinf, fp, indent=4, sort_keys=False)

    def load(self):

        if not Path(self.infpath).isfile():
            return None

        with open(self.infpath, 'r') as f:
            fileinf = json.load(f)

        key = self.dest.basename().lower()

        if key not in fileinf:
            return None

        return fileinf[key]

    def generate(self, fast=None):
        """
        Overload default fast by setting fast=True
        """
        if fast is None:
            fast = self.fast_verify

        p = {}
        fstat_srce = os.stat(self.srce) if self.srce.isfile() else None
        fstat_dest = os.stat(self.dest) if self.dest.isfile() else None

        p['srce_name'] = os.path.basename(self.srce).lower()
        p['srce_modified'] = None if fstat_srce is None else fstat_srce.st_mtime
        p['srce_size'] = None if fstat_srce is None else fstat_srce.st_size

        p['dest_name'] = os.path.basename(self.dest).lower()
        p['dest_modified'] = None if fstat_dest is None else fstat_dest.st_mtime
        p['dest_size'] = None if fstat_dest is None else fstat_dest.st_size

        p['unique_id'] = self.unique_id
        p['user_arguments'] = self.user_arguments

        # If we are testing fast, then we ignore md5
        if not fast:
            p['md5_srce'] = None if fstat_srce is None else fv_md5(self.srce)
            p['md5_dest'] = None if fstat_dest is None else fv_md5(self.dest)

        # The "additional" parameters are not used for equality
        p['additional'] = dict(
            info_date=str(pd.Timestamp.now()),
            srce_created=str(pd.Timestamp(fstat_srce.st_ctime * 1e9)) if 'st_ctime' in dir(fstat_srce) else None,
            srce_modified=str(pd.Timestamp(fstat_srce.st_mtime * 1e9)) if 'st_mtime' in dir(fstat_srce) else None,
            dest_created=str(pd.Timestamp(fstat_dest.st_ctime * 1e9)) if 'st_ctime' in dir(fstat_dest) else None,
            dest_modified=str(pd.Timestamp(fstat_dest.st_mtime * 1e9)) if 'st_mtime' in dir(fstat_dest) else None,
            srce_path=str(self.srce),
            dest_path=str(self.dest)
        )

        return p

    def verify(self, fast=None):
        """
        Overload default fast by setting fast=True
        """
        if fast is None:
            fast = self.fast_verify

        if not self.dest.isfile():
            return False

        if not self.infpath.isfile():
            return False

        p = self.load()

        if p is None:
            return False

        for key, val in self.generate(fast).items():
            if key == 'additional':
                continue

            if key not in p:
                return False

            # Leave a tolerance for numeric instability
            try:
                if abs(val - p[key]) > 1e-6:
                    return False

            # Otherwise exact equality (for strings etc.)
            except TypeError:
                if val != p[key]:
                    return False

        return True
