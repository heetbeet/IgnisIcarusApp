import os

# This only works on Windows.
if os.name == 'nt':
    import winreg
    from types import SimpleNamespace


    def reg_path_to_parameters(reg_path):
        r"""
        Convert a string regpath into usable parameters

        :return SimpleNamespace with keys hkey_base, key_path, key_name
        """
        pathlist = reg_path.split('\\')
        if len(pathlist) < 3:
            assert ValueError(
                rf"A path to a key is at least three nests deep (eg: HKEY_CURRENT_USER\NestName\KeyName), got {reg_path}")

        return SimpleNamespace(
            hkey_base=getattr(winreg, pathlist[0]),
            key_path='\\'.join(pathlist[1:-1]),
            key_name=pathlist[-1]
        )


    def reg_write(reg_path, value, reg_type=None):
        r"""
        Write a value to the Windows registry.

        :param reg_path: Full path to the key you want to mutate or create, eg. HKEY_CURRENT_USER\NestName\KeyName
        :param value: The value of the registry entry
        :param reg_type: Use one of the instances from winreg, like winreg.REG_DWORD
        """
        p = reg_path_to_parameters(reg_path)

        winreg.CreateKey(p.hkey_base, p.key_path)
        registry_key = winreg.OpenKey(p.hkey_base, p.key_path, 0, winreg.KEY_WRITE)

        # key name reserved type val
        if isinstance(value, int):
            if reg_type is None:
                reg_type = winreg.REG_DWORD
            winreg.SetValueEx(registry_key, p.key_name, 0, reg_type, value)

        elif isinstance(value, str):
            # return winreg.SetValue(registry_key, p.key_name, winreg.REG_SZ, value)
            raise NotImplementedError("Unable to write strings to the registry.")

        else:
            raise ValueError("Registry value must be an int or a str")

        winreg.CloseKey(registry_key)


    def reg_read(reg_path):
        raise NotImplementedError("reg_read not yet implemented.")
