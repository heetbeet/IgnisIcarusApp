"""
String utilities
"""
import re
from typing import Union, Tuple

camel_pattern = re.compile(r'(?<!^)(?=[A-Z])')


def camel_to_snake(s: str) -> str:
    """
    Convert camel case to snake case.

    See https://stackoverflow.com/a/1176023

    >>> camel_to_snake("FirstOccurrence")
    'first_occurrence'
    """
    return camel_pattern.sub('_', s).lower()


def hms(sec: Union[float, int]) -> Tuple[int, int, Union[float, int]]:
    """
    Split a duration, in seconds, into hours, minutes and seconds.

    :param sec: A duration, in seconds.

    :return: A tuple containing hours, minutes and seconds.

    >>> hms(3636.5)
    (1, 0, 36.5)

    >>> hms(4999)
    (1, 23, 19)

    >>> hms(2.5)
    (0, 0, 2.5)

    >>> hms(62)
    (0, 1, 2)
    """
    h, remainder = divmod(sec, 3600)
    m, s = divmod(remainder, 60)
    return int(h), int(m), s


def format_duration(sec: Union[float, int]) -> str:
    """
    Format a human-readable duration.

    :param sec: A duration, in seconds.

    :return: The formatted string.

    >>> format_duration(7636)
    '2 hours, 7 minutes and 16 seconds'

    >>> format_duration(3636)
    '1 hour, 0 minutes and 36 seconds'

    >>> format_duration(636)
    '10 minutes and 36 seconds'

    >>> format_duration(96)
    '1 minute and 36 seconds'

    >>> format_duration(36)
    '36 seconds'

    >>> format_duration(1)
    '1 second'
    """
    h, m, s = hms(sec)

    s = int(s)

    h_unit = 'hour' if h == 1 else 'hours'
    m_unit = 'minute' if m == 1 else 'minutes'
    s_unit = 'second' if s == 1 else 'seconds'

    if h:
        return f"{h} {h_unit}, {m} {m_unit} and {s} {s_unit}"

    if m:
        return f"{m} {m_unit} and {s} {s_unit}"

    return f"{s} {s_unit}"
