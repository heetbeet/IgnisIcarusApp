import csv
from pathlib import Path
from typing import Union, Iterable, Sequence, Optional, List, Generator, OrderedDict, Dict, Any

import pandas as pd
from aa_py_core.misc import all_none
from pandasql import sqldf
from pydicti import odicti


def data_to_dicts(
        data: Union[Iterable, Sequence],
        columns: Optional[List[str]] = None
) -> Generator[OrderedDict, None, None]:
    """
    Convert 2D data (rows and columns) into a generator, assuming the first line is a header.

    :param data: The data containing the rows and columns. The first dimension should represent the rows.
    :param columns: A list of column names to keep.
      All other columns are ignored.
      If not specified, use all columns.

    :return: A generator that yields one case insensitive ordered dictionary for each row, using keys from the header.

    Use all columns in original order.
    >>> data = (("a", "b", "c"), (1, 2, 3), (4, 5, 6), (7, 8, 9))
    >>> g = data_to_dicts(data)
    >>> next(g)
    odicti({'a': 1, 'b': 2, 'c': 3})
    >>> next(g)
    odicti({'a': 4, 'b': 5, 'c': 6})
    >>> next(g)
    odicti({'a': 7, 'b': 8, 'c': 9})

    Use specific columns in specified order.
    >>> g = data_to_dicts(data, ['B', 'a'])
    >>> next(g)
    odicti({'B': 2, 'a': 1})
    >>> next(g)
    odicti({'B': 5, 'a': 4})
    >>> next(g)
    odicti({'B': 8, 'a': 7})

    Skips empty rows.
    >>> data = (("a", "b", "c"), (None, None, None), (4, 5, 6))
    >>> g = data_to_dicts(data)
    >>> next(g)
    odicti({'a': 4, 'b': 5, 'c': 6})
    """
    it = iter(data)
    header = next(it)
    for row in it:
        if all_none(row):
            # This is an empty row. Skip it.
            continue

        d = odicti(zip(header, row))
        if columns:
            # Yield row with only the specified columns and in the specified order.
            yield odicti(((k, d[k]) for k in columns))
        else:
            # Yield row with all columns and in table order.
            yield d


def table_data_to_csv_file(
        data: Iterable[Dict[str, Any]],
        include_data: bool,
        include_headers: bool,
        csv_file_path: Path,
):
    # Make sure the destination directory exists.
    csv_file_path.parent.mkdir(exist_ok=True, parents=True)

    with csv_file_path.open(
            mode='w',
            encoding='utf-8',
            newline=''
    ) as f:
        it = iter(data)

        # Get the first row so that we know what the header values and column order are.
        row1: odicti = next(it)

        csv_writer = csv.DictWriter(f, row1.keys())

        if include_headers:
            csv_writer.writeheader()

        if include_data:
            csv_writer.writerow(row1)
            csv_writer.writerows(it)


def query_csv(
        input_file_path: Path,
        pandas_kwargs: Dict,
        sql_query: Optional[str],
) -> pd.DataFrame:
    """
    Query data from a CSV file and return it as a Pandas dataframe.

    :param input_file_path: The path to the CSV file to import.
    :param pandas_kwargs: Extra keyword arguments to pass to the pandas.read_csv function.
    :param sql_query: An optional query to perform on the pandas DataFrame, using pandasql.
        Always use `SELECT ... FROM df ...`
    """
    df = pd.read_csv(input_file_path, **pandas_kwargs)
    if sql_query is not None:
        df = sqldf(sql_query, {'df': df})
    return df
