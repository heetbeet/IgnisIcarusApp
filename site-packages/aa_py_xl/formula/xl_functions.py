"""
Our very own Pythonic implementations of Excel functions!
"""
import datetime
from functools import lru_cache

from pydicti import dicti


def test() -> str:
    return "Yes, this is our custom function."


def average(*args) -> float:
    return sum(args) / len(args)


def concatenate(*args) -> str:
    return ''.join(map(str, args))


def end_of_month(start_date: datetime.date, months: int) -> datetime.date:
    """
    Get the last day of the month that is the indicated number of `months` before or after `start_date`.

    See https://support.microsoft.com/en-us/office/eomonth-function-7314ffa1-2bc9-4005-9d66-f49db127d628

    >>> end_of_month(datetime.date(2020, 2, 3), 0)
    datetime.date(2020, 2, 29)

    >>> end_of_month(datetime.date(2020, 2, 28), 0)
    datetime.date(2020, 2, 29)

    >>> end_of_month(datetime.date(2020, 2, 3), 1)
    datetime.date(2020, 3, 31)

    >>> end_of_month(datetime.date(2020, 2, 3), 2)
    datetime.date(2020, 4, 30)

    >>> end_of_month(datetime.date(2020, 2, 3), -2)
    datetime.date(2019, 12, 31)

    >>> end_of_month(datetime.date(2020, 12, 3), 1)
    datetime.date(2021, 1, 31)

    >>> end_of_month(datetime.date(2021, 1, 3), -1)
    datetime.date(2020, 12, 31)

    >>> end_of_month(datetime.date(2021, 5, 31), 6)
    datetime.date(2021, 11, 30)
    """
    # See https://github.com/dgorissen/pycel/blob/master/src/pycel/lib/date_time.py#L224
    y = start_date.year
    m = start_date.month + months
    a, b = divmod(m, 12)
    y += a
    m = b + 1
    return datetime.date(
        year=y,
        month=m,
        day=1
    ) - datetime.timedelta(days=1)


@lru_cache(1)
def get_xl_functions():
    return dicti({
        'test': test,
        'average': average,
        'concatenate': concatenate,
        'date': datetime.date,
        'sum': lambda *args: sum(args),
        'eomonth': end_of_month,
    })
