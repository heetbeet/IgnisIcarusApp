import json
from contextlib import suppress
from datetime import datetime
from typing import Any, Dict

# Time format used when exporting to JSON and importing from JSON.
from aa_py_xl.udf_util import vba_scripting_dictionary_to_python_dict, vba_collection_to_python_list

time_format_tz = "%Y-%m-%dT%H:%M:%S%z"
time_format_no_tz = "%Y-%m-%dT%H:%M:%S"


def encode_datetime(obj: datetime) -> Dict[str, str]:
    return {
        "type": "datetime",
        "str": obj.strftime(time_format_tz),
    }


def decode_datetime(decoded: Dict[str, str]) -> datetime:
    with suppress(ValueError):
        return datetime.strptime(decoded['str'], time_format_tz)
    return datetime.strptime(decoded['str'], time_format_no_tz)


class XlTableJsonEncoder(json.JSONEncoder):
    """
    A JSON encoder for Excel table data read via xlwings.
    """

    def default(self, obj):
        if isinstance(obj, datetime):
            return encode_datetime(obj)

        return super().default(obj)


def xl_table_json_decoder(decoded: dict) -> Any:
    """
    An object hook for deserializing data that was serialized using the `XlTableJsonEncoder` class.

    :param dict decoded: The default decoded JSON data
    :return: Our interpretation of the decoded JSON data.
    """
    t = decoded.get('type')
    if t == 'datetime':
        return decode_datetime(decoded)

    return decoded


class VbaJsonEncoder(json.JSONEncoder):
    """
    A JSON encoder for VBA data structures received via xlwings.
    """

    def default(self, obj):
        if isinstance(obj, datetime):
            return encode_datetime(obj)

        if hasattr(obj, 'Keys') and hasattr(obj, 'Items'):
            # This looks like a Scripting.Dictionary object.
            return vba_scripting_dictionary_to_python_dict(obj)

        if hasattr(obj, 'Count') and hasattr(obj, 'Item'):
            # This looks like a collection.
            return vba_collection_to_python_list(obj)

        return super().default(obj)
