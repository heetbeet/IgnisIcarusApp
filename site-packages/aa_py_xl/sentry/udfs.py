"""
UDFs to help instrumenting Sentry performance monitoring and error reporting in VBA.

The application that initialises the UDFs is responsible for calling `sentry_sdk.init`,
lest we get a chicken-egg problem.
"""
from random import randrange
from typing import Any, Dict

import xlwings as xw

from aa_py_xl.udf_util import vba_scripting_dictionary_to_python_dict


def dummy(*args, **kwargs):
    return None


try:
    from sentry_sdk import capture_message, set_context, add_breadcrumb, start_transaction

    sentry_installed = True
except ImportError:
    # Sentry is not installed. Replace everything with no-ops.
    sentry_installed = False
    capture_message = dummy
    set_context = dummy
    add_breadcrumb = dummy
    start_transaction = dummy


@xw.sub()
def sentry_capture_message(
        message: str,
        level: str = 'info',
) -> None:
    """
    Log a message to sentry.
    See https://docs.sentry.io/platforms/python/usage/#capturing-messages

    :param message: A description of the event.
    :param level: The log level, e.g. 'info', 'warning' or 'error'.
    """
    capture_message(
        message=message,
        level=level,
    )


@xw.sub()
def sentry_set_context(
        key: str,
        value: Any,  # Scripting.Dictionary
) -> None:
    """
    Set an execution context value in sentry.
    See https://docs.sentry.io/platforms/python/enriching-events/context/

    :param key: Any string.
    :param value: A dictionary of key-value pairs.
    """
    set_context(
        key=key,
        value=vba_scripting_dictionary_to_python_dict(value),
    )


@xw.sub()
def sentry_add_breadcrumb(
        message: str,
        level: str = 'info',
) -> None:
    """
    Drop a sentry breadcrumb.
    See https://docs.sentry.io/platforms/python/enriching-events/breadcrumbs/

    :param message: A description of the event.
    :param level: The log level, e.g. 'info', 'warning' or 'error'.
    """
    add_breadcrumb(
        category='vba',
        message=message,
        level=level,
    )


transactions: Dict[int, Any] = {}


def random_transaction_id():
    while True:
        x = randrange(-2147483648, 2147483648)
        if x not in transactions:
            return x


@xw.func
def sentry_transaction_start(name) -> int:
    x = random_transaction_id()
    transactions[x] = start_transaction(
        op="vba",
        name=name,
    )
    # The caller should keep x and pass it to `sentry_transaction_finished` later.
    return x


@xw.sub
def sentry_transaction_finished(x):
    if sentry_installed:
        transactions[x].finish()
