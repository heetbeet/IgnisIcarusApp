import json
from collections import OrderedDict
from os.path import expandvars
from pathlib import Path
from typing import Optional, List, Any

import xlwings as xw

from aa_py_xl import table_util
from aa_py_xl.data_util import table_data_to_csv_file
from aa_py_xl.json_util import VbaJsonEncoder
from aa_py_xl.tables import Table
from aa_py_xl.udf_util import vba_scripting_dictionary_to_python_dict


@xw.sub
def table_to_csv_file(
        book: str,
        name: str,
        output_dir: str = "",
        output_basename: str = None,
        columns: Optional[List[str]] = None,
        include_data: bool = True,
        include_headers: bool = True,
        extra_scalars: Any = None,  # Scripting.Dictionary
):
    book = Path(expandvars(book)).resolve()
    output_dir = expandvars(output_dir)
    extra_scalars = vba_scripting_dictionary_to_python_dict(extra_scalars)

    table = Table.get_from_book(book=xw.Book(book), name=name)
    data = table.extract_data(columns=columns)

    if extra_scalars:
        # Inject the same extra values into every row. Place the scalars first.
        data = (OrderedDict({**extra_scalars, **row}) for row in data)

    table_data_to_csv_file(
        data=data,
        include_data=include_data,
        include_headers=include_headers,
        csv_file_path=Path(book.parent, output_dir, f'{output_basename or table.name}.csv')
    )


@xw.sub
def csv_file_to_new_table(
        book: str,
        table_name: str,
        sheet_name: str,
        row_number: Optional[int],
        column_number: Optional[int],
        input_file_path: str,
        pandas_kwargs: Any = None,  # Scripting.Dictionary
        sql_query: str = None,
) -> None:
    """
    Query data from a CSV file and place the results in a new ListObject in an Excel workbook.

    :param book: The path to the Excel workbook into which to import the data.
    :param table_name: The name of the table to create or use in the workbook.
        If this table already exists, an error is thrown.
    :param sheet_name: The name of the sheet in which to create the new table.
    :param row_number: The number of the first row of the new table. Auto if None. 1-indexed.
    :param column_number: The number of the first column of the new table. Auto if None. 1-indexed.
    :param input_file_path: The path to the CSV file to import. May be relative to the workbook.
    :param pandas_kwargs: Extra keyword arguments to pass to the pandas.read_csv function.
        Use a Scripting.Dictionary object.
    :param sql_query: An optional query to perform on the pandas DataFrame, using pandasql.
        Always use `SELECT ... FROM df ...`
    """
    book = Path(expandvars(book)).resolve()
    input_file_path = expandvars(input_file_path)

    table_util.csv_file_to_new_table(
        book=xw.Book(book),
        sheet_name=sheet_name,
        table_name=table_name,
        row_number=row_number,
        column_number=column_number,
        input_file_path=Path(book.parent, input_file_path),
        pandas_kwargs=vba_scripting_dictionary_to_python_dict(pandas_kwargs),
        sql_query=sql_query
    )


@xw.func
def example(x, y):
    return 2 * (x + y)


@xw.sub
def json_dump(
        book: str,
        data: Any,
        output_file_path: str,
) -> None:
    book = Path(expandvars(book)).resolve()
    output_file_path = Path(book.parent, expandvars(output_file_path))

    with output_file_path.open('w') as f:
        json.dump(
            obj=data,
            fp=f,
            sort_keys=False,
            indent=4,
            cls=VbaJsonEncoder,
        )
