from typing import Generator, Tuple, Any

import win32com.universal
import xlwings as xw


def has_sheet(book: xw.Book, name: str) -> bool:
    try:
        get_sheet(book, name)
        return True
    except KeyError:
        return False


def get_sheet(book: xw.Book, name: str) -> xw.Sheet:
    """
    Get a sheet by name from an xlwings book.
    Raise a KeyError if the sheet is not found.

    This is the same as `book.sheets[name]`, except with better exception handling.
    The default win32com.universal.com_error exception has some weird behaviour.

    :param book: The Excel workbook, opened by xlwings.
    :param name: The name of the sheet to retrieve.

    :return: An xlwings Sheet object.
    """
    try:
        sheet = book.sheets[name]
    except win32com.universal.com_error:
        sheet = None
        pass
    if not sheet:
        raise KeyError(f"Sheet '{name}' does not exist.")
    return sheet


def find_last_used_column(sheet: xw.Sheet) -> int:
    """
    Find the number of the last column in the given sheet that contains something.
    If the sheet is completely empty, return 0.

    :param sheet: An xlwings Sheet.
    :return: The number of the last non-empty column. Zero if there are no non-empty columns.

    >>> from aa_py_xl.context import excel

    >>> with excel(quiet=True, kill=True) as wb:
    ...     sheet = wb.sheets['Sheet1']
    ...     find_last_used_column(sheet)
    0

    >>> with excel(quiet=True, kill=True) as wb:
    ...     sheet = wb.sheets['Sheet1']
    ...     sheet[1, 0].value = 'moo'
    ...     find_last_used_column(sheet)
    1

    >>> with excel(quiet=True, kill=True) as wb:
    ...     sheet = wb.sheets['Sheet1']
    ...     sheet[0, 1].value = 'moo'
    ...     find_last_used_column(sheet)
    2

    >>> with excel(quiet=True, kill=True) as wb:
    ...     sheet = wb.sheets['Sheet1']
    ...     sheet[3, 5].value = 'foo'
    ...     sheet[6, 10].value = 'bar'
    ...     sheet[2, 6].value = 'baz'
    ...     find_last_used_column(sheet)
    11
    """
    # TODO: This might not be the most reliable wat of doing this.
    #  See https://stackoverflow.com/questions/11926972/how-do-i-find-the-last-column-with-data

    # See https://docs.microsoft.com/en-us/office/vba/api/excel.range.specialcells
    last_cell = sheet.api.Cells.SpecialCells(11)

    if not last_cell.Value and last_cell.Address == "$A$1":
        # Special case. Sheet is empty.
        return 0

    return last_cell.Column


def iter_list_objects(book: xw.Book) -> Generator[Tuple[Any, xw.Sheet], None, None]:
    """
    Iterate over all ListObjects in an Excel workbook.
    """
    for sheet in book.sheets:
        for lo in sheet.api.ListObjects:
            yield lo, sheet


def find_list_object(book: xw.Book, name: str) -> Tuple[Any, xw.Sheet]:
    """
    Get a ListObject by name from an Excel workbook.

    A KeyError is raised when the ListObject is not found.
    Name matching is case insensitive.

    :param Book book: The Excel workbook, opened by xlwings.
    :param str name: The name of the ListObject to retrieve.

    :return:
        A tuple containing:

        - A ListObject. Exposed via xlwings' Excel API. We don't have a proper python return type for this.
          See https://docs.microsoft.com/en-us/office/vba/api/excel.listobject
        - An xlwings Sheet object corresponding to an Excel Worksheet.
          See https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet
    """
    for lo, sheet in iter_list_objects(book):
        if lo.Name.casefold() == name.casefold():
            return lo, sheet
    raise KeyError(f"ListObject {name} was not found.")


def find_named_range(book: xw.Book, name: str) -> Tuple[xw.Range, xw.Sheet]:
    """
    Get a Range by name from an Excel workbook.

    A KeyError is raised when the range is not found.
    Name matching is case insensitive.
    Can get range from workbook scope or sheet scope.

    :param Book book: The Excel workbook, opened by xlwings.
    :param str name: The name of the Range to retrieve.

    :return:
        A tuple containing:

        - An xlwings Range object corresponding to an Excel Range.
          See https://docs.microsoft.com/en-us/office/vba/api/excel.range(object)
        - An xlwings Sheet object corresponding to an Excel Worksheet.
          See https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet
    """
    for sheet in book.sheets:
        try:
            return sheet.range(name), sheet
        except win32com.universal.com_error:
            # Did not find this range.
            pass
    raise KeyError(f"Range {name} was not found.")
