from functools import update_wrapper
from types import TracebackType
from typing import Callable, Tuple, Type, Dict, Any

import sys
import xlwings as xw


def register_xlwings_error_interceptor(
        callback: Callable[
            [
                Tuple[Type[BaseException], BaseException, TracebackType],  # exc_info
                Tuple,  # args
                Dict[str, Any],  # kwargs
            ],
            None,
        ]
) -> None:
    """
    Intercept xlwings' default error handling.

    TODO: Deprecate this?

    :param callback: The function to call before re-raising the error.
    """

    def get_wrapper(f_udf):
        def wrapper(*args, **kwargs):
            try:
                return f_udf(*args, **kwargs)
            except Exception:
                callback(sys.exc_info(), args, kwargs)
                raise

        return wrapper

    register_xlwings_udf_wrapper(get_wrapper)


def register_xlwings_udf_wrapper(
        get_wrapper: Callable[
            [Callable],
            Callable,
        ],
) -> None:
    """
    Register a global wrapper for all UDFs.

    :param get_wrapper: A callback that returns a wrapper function, given the function to wrap.
        The `get_wrapper` function does not need to call `update_wrapper` nor use the `@wraps` decorator.
        That is handled internally here already.
    """
    original = xw.udfs.xlfunc

    def xlfunc_replacement(f_decorated=None, **xlfunc_kwargs):
        """
        Our custom replacement for the xw.udfs.xlfunc decorator.
        :param f_decorated: The function being decorated.
        :param xlfunc_kwargs: Extra keyword arguments to pass to the `xlfunc` decorator.
        """

        def inner(f):
            f_udf = original(f, **xlfunc_kwargs)
            f_wrapper = get_wrapper(f_udf)
            update_wrapper(
                wrapper=f_wrapper,
                wrapped=f_udf,
            )
            return f_wrapper

        # Following the pattern found in the original `xlfunc` function...
        if f_decorated is None:
            return inner
        else:
            return inner(f_decorated)

    xw.udfs.xlfunc = xlfunc_replacement
